# {{.AppName}} Makefile
# Container-based development environment

.PHONY: help
help: ## Show this help message
	@echo 'Usage: make [target]'
	@echo ''
	@echo 'Targets:'
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  %-20s %s\n", $$1, $$2}' $(MAKEFILE_LIST)

## Development
.PHONY: dev
dev: ## Start development server with hot reload
	docker-compose up dev

.PHONY: up
up: ## Start all services in background
	docker-compose up -d

.PHONY: down
down: ## Stop all services
	docker-compose down

.PHONY: logs
logs: ## Show logs from all services
	docker-compose logs -f

## Build & Test
.PHONY: build
build: ## Build the application
	docker-compose run --rm dev go build -v ./cmd/{{.AppName}}

.PHONY: test
test: ## Run all tests with coverage
	docker-compose run --rm -e GO_ENV=test dev go test -v -race -coverprofile=coverage.out ./...

.PHONY: lint
lint: ## Run linter
	docker-compose run --rm dev golangci-lint run

.PHONY: check
check: ## Run all checks (format, vet, lint, test)
	docker-compose run --rm dev go fmt ./...
	docker-compose run --rm dev go vet ./...
	docker-compose run --rm dev golangci-lint run
	docker-compose run --rm -e GO_ENV=test dev go test -v -race -coverprofile=coverage.out ./...
	@echo "All checks passed!"

## Database
.PHONY: migrate-up
migrate-up: ## Run all pending migrations
	docker-compose --profile tools run --rm migrate

.PHONY: migrate-create
migrate-create: ## Create a new migration (usage: make migrate-create name=create_users_table)
	@if [ -z "$(name)" ]; then echo "Error: name is required. Usage: make migrate-create name=migration_name"; exit 1; fi
	docker-compose run --rm dev migrate create -ext sql -dir internal/database/migrations -seq $(name)

.PHONY: sqlc
sqlc: ## Generate SQLc code
	docker-compose --profile tools run --rm sqlc

.PHONY: db-reset
db-reset: ## Reset database (drop, create, migrate)
	docker-compose down -v
	docker-compose up -d db
	@echo "Waiting for database to be ready..."
	@sleep 5
	$(MAKE) migrate-up

## Utilities
.PHONY: shell
shell: ## Open a shell in the dev container
	docker-compose run --rm dev /bin/bash

.PHONY: psql
psql: ## Open PostgreSQL shell
	docker-compose exec db psql -U postgres -d {{.AppName}}_dev

.PHONY: clean
clean: ## Clean build artifacts
	rm -rf ./cmd/{{.AppName}}/{{.AppName}} coverage.out coverage.html

.PHONY: mod-tidy
mod-tidy: ## Tidy go modules
	docker-compose run --rm dev go mod tidy

.DEFAULT_GOAL := help