package service

import (
	"errors"
	"fmt"
)

// BusinessError represents a business logic error
type BusinessError struct {
	Code    string
	Message string
	Err     error
}

func (e *BusinessError) Error() string {
	if e.Err != nil {
		return fmt.Sprintf("%s: %v", e.Message, e.Err)
	}
	return e.Message
}

func (e *BusinessError) Unwrap() error {
	return e.Err
}

// NewBusinessError creates a new business error
func NewBusinessError(code, message string, err error) error {
	return &BusinessError{
		Code:    code,
		Message: message,
		Err:     err,
	}
}

// Common business errors
var (
	ErrDuplicateName = NewBusinessError("duplicate_name", "A {{.DomainLower}} with this name already exists", nil)
	ErrInvalidDateRange = NewBusinessError("invalid_date_range", "Effective start date must be before end date", nil)
	ErrExpired = NewBusinessError("expired", "Cannot modify an expired {{.DomainLower}}", nil)
	ErrEmptyName = NewBusinessError("empty_name", "{{.DomainTitle}} name cannot be empty", nil)
	ErrInvalidEffectiveDate = NewBusinessError("invalid_effective_date", "Effective date cannot be in the past", nil)
)

// IsBusinessError checks if an error is a business error
func IsBusinessError(err error) bool {
	var businessErr *BusinessError
	return errors.As(err, &businessErr)
}

// GetBusinessErrorCode returns the error code if it's a business error
func GetBusinessErrorCode(err error) string {
	var businessErr *BusinessError
	if errors.As(err, &businessErr) {
		return businessErr.Code
	}
	return ""
}