// Package api provides HTTP handlers and middleware for the {{.AppName}} API.
//
// This package implements a RESTful API that follows clean architecture principles
// for response formats. All handlers use a consistent approach to validation,
// error handling, and response formatting.
//
// Key components:
//   - {{.DomainTitle}}Handler: Main handler for processing API requests
//   - APIResponse: Standard response format for all endpoints
//   - Middleware: Request logging, authentication and validation
//
// The API supports:
//   - {{.DomainTitle}} management operations
//   - Health checks and diagnostics
package api

import (
	"context"
	"errors"
	"log/slog"
	"net/http"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/go-chi/render"
	"github.com/google/uuid"

	"{{.ModuleName}}/internal/service"
)

// Version is set at build time using ldflags
var Version = "dev"

// {{.DomainTitle}}Handler handles HTTP requests for the {{.AppName}} API
type {{.DomainTitle}}Handler struct {
	service Service
}

// New{{.DomainTitle}}Handler creates a new {{.Domain}} handler
func New{{.DomainTitle}}Handler(service Service) *{{.DomainTitle}}Handler {
	return &{{.DomainTitle}}Handler{service: service}
}

// Service interface defines the service layer methods
type Service interface {
	// Add your service methods here
	GetHealth(ctx context.Context) (*service.HealthStatus, error)
}

// renderResponse is a helper to render responses with error handling
func renderResponse(w http.ResponseWriter, r *http.Request, response render.Renderer) {
	if err := render.Render(w, r, response); err != nil {
		slog.ErrorContext(r.Context(), "Failed to render response", "error", err)
	}
}

// HealthCheck handles health check requests
func (h *{{.DomainTitle}}Handler) HealthCheck(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	
	health, err := h.service.GetHealth(ctx)
	if err != nil {
		slog.ErrorContext(ctx, "Health check failed", "error", err)
		renderResponse(w, r, NewErrorResponse(http.StatusInternalServerError, "Health check failed"))
		return
	}
	
	renderResponse(w, r, NewSuccessResponse(health))
}